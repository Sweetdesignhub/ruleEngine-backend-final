generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}
model Rule {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  data           Json
  flowInput      Json?
  secret         String
  status         String       @default("ACTIVE")
  ruleType       String
  activationDate DateTime     @default(now())
  category       String
  OrganizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  versions       Version[]    @relation("RuleVersions") // One-to-many relationship with Version

  // One-to-many relationships with Node and Edge
  nodes          Node[]       @relation("RuleNodes")
  edges          Edge[]       @relation("RuleEdges")
}

model Node {
  id          String   @id
  type        String
  positionX   Float
  positionY   Float
  width       Float
  height      Float
  data        Json
  ruleId      Int      // Foreign key to Rule
  rule        Rule     @relation("RuleNodes", fields: [ruleId], references: [id]) // Add relation name here
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Edge {
  id          String   @id
  source      String
  target      String
  label       String   @default("next")
  animated    Boolean
  targetHandle String?
  selected    Boolean? 
  ruleId      Int      // Foreign key to Rule
  rule        Rule     @relation("RuleEdges", fields: [ruleId], references: [id]) // Add relation name here
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model Version {
  id          Int      @id @default(autoincrement())
  ruleId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  data        Json
  flowInput   Json?
  versionName String   @default("1.0")
  rule        Rule     @relation("RuleVersions", fields: [ruleId], references: [id])
}

model Teams {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  organizationId Int
  ownerId        Int
  deletedAt      DateTime?
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  owner          User         @relation("OwnedTeams", fields: [ownerId], references: [id])
  users          User[]       @relation("TeamUsers")
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  ownerId     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean   @default(false)
  owner       User      @relation("OwnerOrganizations", fields: [ownerId], references: [id])
  rules       Rule[]    @relation("OrganizationRules")
  teams       Teams[]
  users       User[]    @relation("UserOrganizations")
}

model User {
  id                 Int            @id @default(autoincrement())
  name               String
  email              String         @unique
  password           String
  role               Role           @default(USER)
  emailVerified      Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  secretKeys         SecretKey[]    @relation("UserSecretKeys") // One-to-many relationship with SecretKey
}

model SecretKey {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  userId    Int
  user      User     @relation("UserSecretKeys", fields: [userId], references: [id]) // Foreign key relationship
}


model FlowFile {
  id      Int    @id @default(autoincrement())
  ruleId  String @unique
  name    String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Dataset {
  id           Int      @id @default(autoincrement())
  title        String   @unique
  fileUrl      String   // Stores file path or S3 bucket link
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  termsAccepted      Boolean        @default(false)
  ownedOrganizations Organization[] @relation("OwnerOrganizations")
  ownedTeams         Teams[]        @relation("OwnedTeams")
  teamMemberships    Teams[]        @relation("TeamUsers")
  organizations      Organization[] @relation("UserOrganizations")
}

enum Role {
  USER
  ADMIN
}
